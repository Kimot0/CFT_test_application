// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.test.Data.Remote.Entity

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class LocationJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Location>() {
  private val options: JsonReader.Options = JsonReader.Options.of("street", "city", "state",
      "country", "coordinates")

  private val streetAdapter: JsonAdapter<Street> = moshi.adapter(Street::class.java, emptySet(),
      "street")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "city")

  private val coordinatesAdapter: JsonAdapter<Coordinates> = moshi.adapter(Coordinates::class.java,
      emptySet(), "coordinates")

  override fun toString(): String = buildString(30) {
      append("GeneratedJsonAdapter(").append("Location").append(')') }

  override fun fromJson(reader: JsonReader): Location {
    var street: Street? = null
    var city: String? = null
    var state: String? = null
    var country: String? = null
    var coordinates: Coordinates? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> street = streetAdapter.fromJson(reader) ?: throw Util.unexpectedNull("street",
            "street", reader)
        1 -> city = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("city", "city",
            reader)
        2 -> state = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("state", "state",
            reader)
        3 -> country = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("country",
            "country", reader)
        4 -> coordinates = coordinatesAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("coordinates", "coordinates", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Location(
        street = street ?: throw Util.missingProperty("street", "street", reader),
        city = city ?: throw Util.missingProperty("city", "city", reader),
        state = state ?: throw Util.missingProperty("state", "state", reader),
        country = country ?: throw Util.missingProperty("country", "country", reader),
        coordinates = coordinates ?: throw Util.missingProperty("coordinates", "coordinates",
            reader)
    )
  }

  override fun toJson(writer: JsonWriter, value_: Location?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("street")
    streetAdapter.toJson(writer, value_.street)
    writer.name("city")
    stringAdapter.toJson(writer, value_.city)
    writer.name("state")
    stringAdapter.toJson(writer, value_.state)
    writer.name("country")
    stringAdapter.toJson(writer, value_.country)
    writer.name("coordinates")
    coordinatesAdapter.toJson(writer, value_.coordinates)
    writer.endObject()
  }
}
